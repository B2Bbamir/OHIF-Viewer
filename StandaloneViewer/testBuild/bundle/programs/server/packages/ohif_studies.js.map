{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:studies/both/main.js","meteor://ðŸ’»app/packages/ohif:studies/server/main.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/lib/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/lib/parseFloatArray.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/services/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/services/namespace.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/services/qido/instances.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/services/qido/studies.js","meteor://ðŸ’»app/packages/ohif:studies/imports/both/services/wado/retrieveMetadata.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/methods/getStudyMetadata.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/methods/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/methods/studylistSearch.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/index.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/namespace.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/dimse/instances.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/dimse/retrieveMetadata.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/dimse/setup.js","meteor://ðŸ’»app/packages/ohif:studies/imports/server/services/dimse/studies.js"],"names":["OHIF","module","watch","require","v","studies","export","parseFloatArray","obj","result","objs","split","i","length","push","parseFloat","services","QIDO","WADO","DICOMwebClient","default","DICOMWeb","resultDataToStudyMetadata","server","studyInstanceUid","resultData","seriesMap","seriesList","forEach","instance","seriesInstanceUid","getString","series","seriesNumber","instances","sopInstanceUid","uri","wadoUriRoot","sopClassUid","instanceNumber","Instances","config","url","qidoRoot","headers","getAuthorizationHeader","dicomWeb","api","queryParams","getQIDOQueryParams","filter","qidoSupportsIncludeField","options","studyInstanceUID","searchForInstances","then","data","Meteor","isServer","XMLHttpRequest","global","dateToString","date","year","getFullYear","toString","month","getMonth","day","getDate","repeat","concat","serverSupportsQIDOIncludeField","commaSeparatedFields","join","parameters","PatientName","patientName","PatientID","patientId","AccessionNumber","accessionNumber","StudyDescription","studyDescription","ModalitiesInStudy","modalitiesInStudy","limit","offset","includefield","studyDateFrom","studyDateTo","dateFrom","Date","dateTo","StudyDate","studyUids","Array","isArray","replace","StudyInstanceUID","params","Object","keys","key","undefined","resultDataToStudies","study","studyDate","studyTime","referringPhysicianName","getName","patientBirthdate","patientSex","studyId","numberOfStudyRelatedSeries","numberOfStudyRelatedInstances","modalities","getModalities","Studies","searchForStudies","paletteColorCache","count","maxAge","entries","isValidUID","paletteUID","get","entry","hasOwnProperty","now","time","add","uid","buildInstanceWadoUrl","paramString","buildInstanceWadoRsUri","wadoRoot","buildInstanceFrameWadoRsUri","frame","baseWadoRsUri","getSourceImageInstanceUid","SourceImageSequence","Value","getPaletteColor","tag","lutDescriptor","numLutEntries","bits","WADOProxy","convertURL","BulkDataURI","indexOf","includes","readUInt16","byteArray","position","arrayBufferToPaletteColorLUT","arraybuffer","Uint8Array","lut","retrieveBulkData","getPaletteColors","Promise","resolve","reject","r","g","b","promises","all","args","red","green","blue","getFrameIncrementPointer","element","frameIncrementPointerNames","value","getRadiopharmaceuticalInfo","modality","radiopharmaceuticalInfo","firstPetRadiopharmaceuticalInfo","radiopharmaceuticalStartTime","radionuclideTotalDose","getNumber","radionuclideHalfLife","anInstance","studyData","patientAge","patientSize","patientWeight","imageCount","institutionName","map","seriesDescription","seriesDate","seriesTime","wadouri","wadorsuri","instanceSummary","imageType","imagePositionPatient","imageOrientationPatient","frameOfReferenceUID","sliceLocation","samplesPerPixel","photometricInterpretation","planarConfiguration","rows","columns","pixelSpacing","pixelAspectRatio","bitsAllocated","bitsStored","highBit","pixelRepresentation","smallestPixelValue","largestPixelValue","windowCenter","windowWidth","rescaleIntercept","rescaleSlope","rescaleType","sourceImageInstanceUid","laterality","viewPosition","acquisitionDateTime","numberOfFrames","frameIncrementPointer","frameTime","frameTimeVector","sliceThickness","lossyImageCompression","derivationDescription","lossyImageCompressionRatio","lossyImageCompressionMethod","echoNumber","contrastBolusAgent","imageRendering","thumbnailRendering","redPaletteColorLookupTableDescriptor","greenPaletteColorLookupTableDescriptor","bluePaletteColorLookupTableDescriptor","palettes","paletteColorLookupTableUID","redPaletteColorLookupTableData","greenPaletteColorLookupTableData","bluePaletteColorLookupTableData","RetrieveMetadata","retrieveStudyMetadata","methods","GetStudyMetadata","log","info","servers","getCurrentServer","Error","type","DIMSE","error","trace","StudyListSearch","instanceRaw","toObject","peers","serverRoot","host","port","retrieveInstances","getValue","defaultValue","patientBirthDate","tablePosition","spacingBetweenSlices","activeServer","supportsInstanceRetrievalByStudyUid","results","retrieveInstancesByStudyOnly","CurrentServer","setupDIMSE","connection","reset","peer","addPeer","startup","find","observe","added","changed","moment","studyRaw","filterStudyDate","convertDate","format","retrieveStudies"],"mappings":"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","file":"/packages/ohif_studies.js","sourcesContent":["import { OHIF } from 'meteor/ohif:core';\n\nOHIF.studies = {};\n\nrequire('../imports/both');\n","require('../imports/server');\n","import './lib';\nimport './services';\n","import './parseFloatArray.js';\n","export const parseFloatArray = function(obj) {\n    var result = [];\n\n    if (!obj) {\n        return result;\n    }\n\n    var objs = obj.split(\"\\\\\");\n    for (var i = 0; i < objs.length; i++) {\n        result.push(parseFloat(objs[i]));\n    }\n\n    return result;\n};\n","import './namespace';\n\n// DICOMWeb instance, study, and metadata retrieval\nimport './qido/instances.js';\nimport './qido/studies.js';\nimport './wado/retrieveMetadata.js';\n","import { OHIF } from 'meteor/ohif:core';\n\nOHIF.studies.services = {\n    QIDO: {},\n    WADO: {}\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport DICOMwebClient from 'dicomweb-client';\n\nconst { DICOMWeb } = OHIF;\n\n/**\n * Parses data returned from a QIDO search and transforms it into\n * an array of series that are present in the study\n *\n * @param server The DICOM server\n * @param studyInstanceUid\n * @param resultData\n * @returns {Array} Series List\n */\nfunction resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\n    var seriesMap = {};\n    var seriesList = [];\n\n    resultData.forEach(function(instance) {\n        // Use seriesMap to cache series data\n        // If the series instance UID has already been used to\n        // process series data, continue using that series\n        var seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n        var series = seriesMap[seriesInstanceUid];\n\n        // If no series data exists in the seriesMap cache variable,\n        // process any available series data\n        if (!series) {\n            series = {\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: DICOMWeb.getString(instance['00200011']),\n                instances: []\n            };\n\n            // Save this data in the seriesMap cache variable\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        // The uri for the dicomweb\n        // NOTE: DCM4CHEE seems to return the data zipped\n        // NOTE: Orthanc returns the data with multi-part mime which cornerstoneWADOImageLoader doesn't\n        //       know how to parse yet\n        //var uri = DICOMWeb.getString(instance['00081190']);\n        //uri = uri.replace('wado-rs', 'dicom-web');\n\n        // manually create a WADO-URI from the UIDs\n        // NOTE: Haven't been able to get Orthanc's WADO-URI to work yet - maybe its not configured?\n        var sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n        var uri = server.wadoUriRoot + '?requestType=WADO&studyUID=' + studyInstanceUid + '&seriesUID=' + seriesInstanceUid + '&objectUID=' + sopInstanceUid + '&contentType=application%2Fdicom';\n\n        // Add this instance to the current series\n        series.instances.push({\n            sopClassUid: DICOMWeb.getString(instance['00080016']),\n            sopInstanceUid: sopInstanceUid,\n            uri: uri,\n            instanceNumber: DICOMWeb.getString(instance['00200013'])\n        });\n    });\n    return seriesList;\n}\n\n/**\n * Retrieve a set of instances using a QIDO call\n * @param server\n * @param studyInstanceUid\n * @throws ECONNREFUSED\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\n */\nOHIF.studies.services.QIDO.Instances = function(server, studyInstanceUid) {\n    // TODO: Are we using this function anywhere?? Can we remove it?\n\n    const config = {\n        url: server.qidoRoot,\n        headers: OHIF.DICOMWeb.getAuthorizationHeader()\n    };\n    const dicomWeb = new DICOMwebClient.api.DICOMwebClient(config);\n    const queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\n    const options = {\n        studyInstanceUID: studyInstanceUid\n    };\n\n    return dicomWeb.searchForInstances(options).then(result => {\n        return {\n            wadoUriRoot: server.wadoUriRoot,\n            studyInstanceUid: studyInstanceUid,\n            seriesList: resultDataToStudyMetadata(server, studyInstanceUid, result.data)\n        };\n    });\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport DICOMwebClient from 'dicomweb-client';\n\nconst { DICOMWeb } = OHIF;\n\n// TODO: Is there an easier way to do this?\nif (Meteor.isServer) {\n    var XMLHttpRequest = require('xhr2');\n\n    global.XMLHttpRequest = XMLHttpRequest;\n}\n\n/**\n * Creates a QIDO date string for a date range query\n * Assumes the year is positive, at most 4 digits long.\n *\n * @param date The Date object to be formatted\n * @returns {string} The formatted date string\n */\nfunction dateToString(date) {\n    if (!date) return '';\n    let year = date.getFullYear().toString();\n    let month = (date.getMonth() + 1).toString();\n    let day = date.getDate().toString();\n    year = '0'.repeat(4 - year.length).concat(year);\n    month = '0'.repeat(2 - month.length).concat(month);\n    day = '0'.repeat(2 - day.length).concat(day);\n    return ''.concat(year, month, day);\n}\n\n/**\n * Produces a QIDO URL given server details and a set of specified search filter\n * items\n *\n * @param filter\n * @param serverSupportsQIDOIncludeField\n * @returns {string} The URL with encoded filter query data\n */\nfunction getQIDOQueryParams(filter, serverSupportsQIDOIncludeField) {\n    const commaSeparatedFields = [\n        '00081030', // Study Description\n        '00080060' //Modality\n        // Add more fields here if you want them in the result\n    ].join(',');\n\n    const parameters = {\n        PatientName: filter.patientName,\n        PatientID: filter.patientId,\n        AccessionNumber: filter.accessionNumber,\n        StudyDescription: filter.studyDescription,\n        ModalitiesInStudy: filter.modalitiesInStudy,\n        limit: filter.limit,\n        offset: filter.offset,\n        includefield: serverSupportsQIDOIncludeField ? commaSeparatedFields : 'all'\n    };\n\n    // build the StudyDate range parameter\n    if (filter.studyDateFrom || filter.studyDateTo) {\n        const dateFrom = dateToString(new Date(filter.studyDateFrom));\n        const dateTo = dateToString(new Date(filter.studyDateTo));\n        parameters.StudyDate = `${dateFrom}-${dateTo}`;\n    }\n\n    // Build the StudyInstanceUID parameter\n    if (filter.studyInstanceUid) {\n        let studyUids = filter.studyInstanceUid;\n        studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\n        studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\n        parameters.StudyInstanceUID = studyUids;\n    }\n\n    // Clean query params of undefined values.\n    const params = {};\n    Object.keys(parameters).forEach(key => {\n        if (parameters[key] !== undefined &&\n            parameters[key] !== \"\") {\n            params[key] = parameters[key];\n        }\n    });\n\n    return params;\n}\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param resultData\n * @returns {Array} An array of Study MetaData objects\n */\nfunction resultDataToStudies(resultData) {\n    const studies = [];\n\n    if (!resultData || !resultData.length) return;\n\n    resultData.forEach(study => studies.push({\n        studyInstanceUid: DICOMWeb.getString(study['0020000D']),\n        // 00080005 = SpecificCharacterSet\n        studyDate: DICOMWeb.getString(study['00080020']),\n        studyTime: DICOMWeb.getString(study['00080030']),\n        accessionNumber: DICOMWeb.getString(study['00080050']),\n        referringPhysicianName: DICOMWeb.getString(study['00080090']),\n        // 00081190 = URL\n        patientName: DICOMWeb.getName(study['00100010']),\n        patientId: DICOMWeb.getString(study['00100020']),\n        patientBirthdate: DICOMWeb.getString(study['00100030']),\n        patientSex: DICOMWeb.getString(study['00100040']),\n        studyId: DICOMWeb.getString(study['00200010']),\n        numberOfStudyRelatedSeries: DICOMWeb.getString(study['00201206']),\n        numberOfStudyRelatedInstances: DICOMWeb.getString(study['00201208']),\n        studyDescription: DICOMWeb.getString(study['00081030']),\n        // modality: DICOMWeb.getString(study['00080060']),\n        // modalitiesInStudy: DICOMWeb.getString(study['00080061']),\n        modalities: DICOMWeb.getString(DICOMWeb.getModalities(study['00080060'], study['00080061']))\n    }));\n\n    return studies;\n}\n\nOHIF.studies.services.QIDO.Studies = (server, filter) => {\n    const config = {\n        url: server.qidoRoot,\n        headers: OHIF.DICOMWeb.getAuthorizationHeader()\n    };\n\n    const dicomWeb = new DICOMwebClient.api.DICOMwebClient(config);\n    const queryParams = getQIDOQueryParams(filter, server.qidoSupportsIncludeField);\n    const options = {\n        queryParams\n    };\n\n    return dicomWeb.searchForStudies(options).then(resultDataToStudies);\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport DICOMwebClient from 'dicomweb-client';\n\nimport { parseFloatArray } from '../../lib/parseFloatArray';\n\nconst { DICOMWeb } = OHIF;\n\n/**\n * Simple cache schema for retrieved color palettes.\n */\nconst paletteColorCache = {\n    count: 0,\n    maxAge: 24 * 60 * 60 * 1000, // 24h cache?\n    entries: {},\n    isValidUID: function (paletteUID) {\n        return typeof paletteUID === 'string' && paletteUID.length > 0;\n    },\n    get: function (paletteUID) {\n        let entry = null;\n        if (this.entries.hasOwnProperty(paletteUID)) {\n            entry = this.entries[paletteUID];\n            // check how the entry is...\n            if ((Date.now() - entry.time) > this.maxAge) {\n                // entry is too old... remove entry.\n                delete this.entries[paletteUID];\n                this.count--;\n                entry = null;\n            }\n        }\n        return entry;\n    },\n    add: function (entry) {\n        if (this.isValidUID(entry.uid)) {\n            let paletteUID = entry.uid;\n            if (this.entries.hasOwnProperty(paletteUID) !== true) {\n                this.count++; // increment cache entry count...\n            }\n            entry.time = Date.now();\n            this.entries[paletteUID] = entry;\n            // @TODO: Add logic to get rid of old entries and reduce memory usage...\n        }\n    }\n};\n\n/** Returns a WADO url for an instance\n *\n * @param studyInstanceUid\n * @param seriesInstanceUid\n * @param sopInstanceUid\n * @returns  {string}\n */\nfunction buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n    // TODO: This can be removed, since DICOMWebClient has the same function. Not urgent, though\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${studyInstanceUid}`);\n    params.push(`seriesUID=${seriesInstanceUid}`);\n    params.push(`objectUID=${sopInstanceUid}`);\n    params.push('contentType=application/dicom');\n    params.push('transferSyntax=*');\n\n    const paramString = params.join('&');\n\n    return `${server.wadoUriRoot}?${paramString}`;\n}\n\nfunction buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid) {\n    return `${server.wadoRoot}/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}`\n}\n\nfunction buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid, frame) {\n    const baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n    frame = frame != null || 1;\n\n    return `${baseWadoRsUri}/frames/${frame}`\n}\n\n/**\n * Parses the SourceImageSequence, if it exists, in order\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\n * is used to refer to this image in any accompanying DICOM-SR documents.\n *\n * @param instance\n * @returns {String} The ReferenceSOPInstanceUID\n */\nfunction getSourceImageInstanceUid(instance) {\n    // TODO= Parse the whole Source Image Sequence\n    // This is a really poor workaround for now.\n    // Later we should probably parse the whole sequence.\n    var SourceImageSequence = instance['00082112'];\n    if (SourceImageSequence && SourceImageSequence.Value && SourceImageSequence.Value.length) {\n        return SourceImageSequence.Value[0]['00081155'].Value[0];\n    }\n}\n\nfunction getPaletteColor(server, instance, tag, lutDescriptor) {\n    const numLutEntries = lutDescriptor[0];\n    const bits = lutDescriptor[2];\n\n    let uri = WADOProxy.convertURL(instance[tag].BulkDataURI, server)\n\n    // TODO: Workaround for dcm4chee behind SSL-terminating proxy returning\n    // incorrect bulk data URIs\n    if (server.wadoRoot.indexOf('https') === 0 &&\n        !uri.includes('https')) {\n        uri = uri.replace('http', 'https');\n    }\n\n    const config = {\n        url: server.wadoRoot, //BulkDataURI is absolute, so this isn't used\n        headers: OHIF.DICOMWeb.getAuthorizationHeader()\n    };\n    const dicomWeb = new DICOMwebClient.api.DICOMwebClient(config);\n    const options = {\n        BulkDataURI: uri\n    };\n\n    const readUInt16 = (byteArray, position) => {\n        return byteArray[position] + (byteArray[position + 1] * 256);\n    }\n\n    const arrayBufferToPaletteColorLUT = (arraybuffer) =>{\n        const byteArray = new Uint8Array(arraybuffer);\n        const lut = [];\n\n        for (let i = 0; i < numLutEntries; i++) {\n            if (bits === 16) {\n                lut[i] = readUInt16(byteArray, i * 2);\n            } else {\n                lut[i] = byteArray[i];\n            }\n        }\n\n        return lut;\n    }\n\n    return dicomWeb.retrieveBulkData(options).then(arrayBufferToPaletteColorLUT)\n}\n\n/**\n * Fetch palette colors for instances with \"PALETTE COLOR\" photometricInterpretation.\n *\n * @param server {Object} Current server;\n * @param instance {Object} The retrieved instance metadata;\n * @returns {String} The ReferenceSOPInstanceUID\n */\nasync function getPaletteColors(server, instance, lutDescriptor) {\n    let paletteUID = DICOMWeb.getString(instance['00281199']);\n\n    return new Promise((resolve, reject) => {\n        if (paletteColorCache.isValidUID(paletteUID)) {\n            const entry = paletteColorCache.get(paletteUID);\n\n            if (entry) {\n                return resolve(entry);\n            }\n        }\n\n        // no entry in cache... Fetch remote data.\n        const r = getPaletteColor(server, instance, '00281201', lutDescriptor);\n        const g = getPaletteColor(server, instance, '00281202', lutDescriptor);;\n        const b = getPaletteColor(server, instance, '00281203', lutDescriptor);;\n\n        const promises = [r, g, b];\n\n        Promise.all(promises).then((args) => {\n            entry = {\n                red: args[0],\n                green: args[1],\n                blue: args[2]\n            };\n\n            // when paletteUID is present, the entry can be cached...\n            entry.uid = paletteUID;\n            paletteColorCache.add(entry);\n\n            resolve(entry);\n        });\n    });\n}\n\nfunction getFrameIncrementPointer(element) {\n    const frameIncrementPointerNames = {\n        '00181065': 'frameTimeVector',\n        '00181063': 'frameTime'\n    };\n\n    if(!element || !element.Value || !element.Value.length) {\n        return;\n    }\n\n    const value = element.Value[0];\n    return frameIncrementPointerNames[value];\n}\n\nfunction getRadiopharmaceuticalInfo(instance) {\n    const modality = DICOMWeb.getString(instance['00080060']);\n\n    if (modality !== 'PT') {\n        return;\n    }\n\n    const radiopharmaceuticalInfo = instance['00540016'];\n    if ((radiopharmaceuticalInfo === undefined) || !radiopharmaceuticalInfo.Value || !radiopharmaceuticalInfo.Value.length) {\n        return;\n    }\n\n    const firstPetRadiopharmaceuticalInfo = radiopharmaceuticalInfo.Value[0];\n    return {\n        radiopharmaceuticalStartTime: DICOMWeb.getString(firstPetRadiopharmaceuticalInfo['00181072']),\n        radionuclideTotalDose: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181074']),\n        radionuclideHalfLife: DICOMWeb.getNumber(firstPetRadiopharmaceuticalInfo['00181075'])\n    };\n}\n\n/**\n * Parses result data from a WADO search into Study MetaData\n * Returns an object populated with study metadata, including the\n * series list.\n *\n * @param server\n * @param studyInstanceUid\n * @param resultData\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nasync function resultDataToStudyMetadata(server, studyInstanceUid, resultData) {\n    if (!resultData.length) {\n        return;\n    }\n\n    const anInstance = resultData[0];\n    if (!anInstance) {\n        return;\n    }\n\n    const studyData = {\n        seriesList: [],\n        studyInstanceUid,\n        wadoUriRoot: server.wadoUriRoot,\n        patientName: DICOMWeb.getName(anInstance['00100010']),\n        patientId: DICOMWeb.getString(anInstance['00100020']),\n        patientAge: DICOMWeb.getNumber(anInstance['00101010']),\n        patientSize: DICOMWeb.getNumber(anInstance['00101020']),\n        patientWeight: DICOMWeb.getNumber(anInstance['00101030']),\n        accessionNumber: DICOMWeb.getString(anInstance['00080050']),\n        studyDate: DICOMWeb.getString(anInstance['00080020']),\n        modalities: DICOMWeb.getString(anInstance['00080061']),\n        studyDescription: DICOMWeb.getString(anInstance['00081030']),\n        imageCount: DICOMWeb.getString(anInstance['00201208']),\n        studyInstanceUid: DICOMWeb.getString(anInstance['0020000D']),\n        institutionName: DICOMWeb.getString(anInstance['00080080'])\n    };\n\n    const seriesMap = {};\n\n    await Promise.all(resultData.map(async function(instance) {\n        const seriesInstanceUid = DICOMWeb.getString(instance['0020000E']);\n        let series = seriesMap[seriesInstanceUid];\n\n        if (!series) {\n            series = {\n                seriesDescription: DICOMWeb.getString(instance['0008103E']),\n                modality: DICOMWeb.getString(instance['00080060']),\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: DICOMWeb.getNumber(instance['00200011']),\n                seriesDate: DICOMWeb.getString(instance['00080021']),\n                seriesTime: DICOMWeb.getString(instance['00080031']),\n                instances: []\n            };\n            seriesMap[seriesInstanceUid] = series;\n            studyData.seriesList.push(series);\n        }\n\n        const sopInstanceUid = DICOMWeb.getString(instance['00080018']);\n        const wadouri = buildInstanceWadoUrl(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n        const baseWadoRsUri = buildInstanceWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n        const wadorsuri = buildInstanceFrameWadoRsUri(server, studyInstanceUid, seriesInstanceUid, sopInstanceUid);\n\n        const instanceSummary = {\n            imageType: DICOMWeb.getString(instance['00080008']),\n            sopClassUid: DICOMWeb.getString(instance['00080016']),\n            modality: DICOMWeb.getString(instance['00080060']),\n            sopInstanceUid,\n            instanceNumber: DICOMWeb.getNumber(instance['00200013']),\n            imagePositionPatient: DICOMWeb.getString(instance['00200032']),\n            imageOrientationPatient: DICOMWeb.getString(instance['00200037']),\n            frameOfReferenceUID: DICOMWeb.getString(instance['00200052']),\n            sliceLocation: DICOMWeb.getNumber(instance['00201041']),\n            samplesPerPixel: DICOMWeb.getNumber(instance['00280002']),\n            photometricInterpretation: DICOMWeb.getString(instance['00280004']),\n            planarConfiguration: DICOMWeb.getNumber(instance['00280006']),\n            rows: DICOMWeb.getNumber(instance['00280010']),\n            columns: DICOMWeb.getNumber(instance['00280011']),\n            pixelSpacing: DICOMWeb.getString(instance['00280030']),\n            pixelAspectRatio: DICOMWeb.getString(instance['00280034']),\n            bitsAllocated: DICOMWeb.getNumber(instance['00280100']),\n            bitsStored: DICOMWeb.getNumber(instance['00280101']),\n            highBit: DICOMWeb.getNumber(instance['00280102']),\n            pixelRepresentation: DICOMWeb.getNumber(instance['00280103']),\n            smallestPixelValue: DICOMWeb.getNumber(instance['00280106']),\n            largestPixelValue: DICOMWeb.getNumber(instance['00280107']),\n            windowCenter: DICOMWeb.getString(instance['00281050']),\n            windowWidth: DICOMWeb.getString(instance['00281051']),\n            rescaleIntercept: DICOMWeb.getNumber(instance['00281052']),\n            rescaleSlope: DICOMWeb.getNumber(instance['00281053']),\n            rescaleType: DICOMWeb.getNumber(instance['00281054']),\n            sourceImageInstanceUid: getSourceImageInstanceUid(instance),\n            laterality: DICOMWeb.getString(instance['00200062']),\n            viewPosition: DICOMWeb.getString(instance['00185101']),\n            acquisitionDateTime: DICOMWeb.getString(instance['0008002A']),\n            numberOfFrames: DICOMWeb.getNumber(instance['00280008']),\n            frameIncrementPointer: getFrameIncrementPointer(instance['00280009']),\n            frameTime: DICOMWeb.getNumber(instance['00181063']),\n            frameTimeVector: parseFloatArray(DICOMWeb.getString(instance['00181065'])),\n            sliceThickness: DICOMWeb.getNumber(instance['00180050']),\n            lossyImageCompression: DICOMWeb.getString(instance['00282110']),\n            derivationDescription: DICOMWeb.getString(instance['00282111']),\n            lossyImageCompressionRatio: DICOMWeb.getString(instance['00282112']),\n            lossyImageCompressionMethod: DICOMWeb.getString(instance['00282114']),\n            echoNumber: DICOMWeb.getString(instance['00180086']),\n            contrastBolusAgent: DICOMWeb.getString(instance['00180010']),\n            radiopharmaceuticalInfo: getRadiopharmaceuticalInfo(instance),\n            baseWadoRsUri: baseWadoRsUri,\n            wadouri: WADOProxy.convertURL(wadouri, server),\n            wadorsuri: WADOProxy.convertURL(wadorsuri, server),\n            imageRendering: server.imageRendering,\n            thumbnailRendering: server.thumbnailRendering\n        };\n\n        // Get additional information if the instance uses \"PALETTE COLOR\" photometric interpretation\n        if (instanceSummary.photometricInterpretation === 'PALETTE COLOR') {\n            const redPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281101']));\n            const greenPaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281102']));\n            const bluePaletteColorLookupTableDescriptor = parseFloatArray(DICOMWeb.getString(instance['00281103']));\n            const palettes = await getPaletteColors(server, instance, redPaletteColorLookupTableDescriptor);\n\n            if (palettes) {\n                if (palettes.uid) {\n                    instanceSummary.paletteColorLookupTableUID = palettes.uid;\n                }\n\n                instanceSummary.redPaletteColorLookupTableData = palettes.red;\n                instanceSummary.greenPaletteColorLookupTableData = palettes.green;\n                instanceSummary.bluePaletteColorLookupTableData = palettes.blue;\n                instanceSummary.redPaletteColorLookupTableDescriptor = redPaletteColorLookupTableDescriptor;\n                instanceSummary.greenPaletteColorLookupTableDescriptor = greenPaletteColorLookupTableDescriptor;\n                instanceSummary.bluePaletteColorLookupTableDescriptor = bluePaletteColorLookupTableDescriptor;\n            }\n        }\n\n        series.instances.push(instanceSummary);\n    }));\n\n    return studyData;\n}\n\n/**\n * Retrieve Study MetaData from a DICOM server using a WADO call\n *\n * @param server\n * @param studyInstanceUid\n * @returns {Promise}\n */\nOHIF.studies.services.WADO.RetrieveMetadata = async function(server, studyInstanceUid) {\n    const config = {\n        url: server.wadoRoot,\n        headers: OHIF.DICOMWeb.getAuthorizationHeader()\n    };\n    const dicomWeb = new DICOMwebClient.api.DICOMwebClient(config);\n    const options = {\n        studyInstanceUID: studyInstanceUid\n    };\n\n    return dicomWeb.retrieveStudyMetadata(options).then(result => {\n        return resultDataToStudyMetadata(server, studyInstanceUid, result);\n    });\n};\n","import './methods';\nimport './services';\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nMeteor.methods({\n    /**\n     * Retrieves Study metadata given a Study Instance UID\n     * This Meteor method is available from both the client and the server\n     */\n    GetStudyMetadata: function(studyInstanceUid) {\n        OHIF.log.info('GetStudyMetadata(%s)', studyInstanceUid);\n\n        // Get the server data. This is user-defined in the config.json files or through servers\n        // configuration modal\n        const server = OHIF.servers.getCurrentServer();\n\n        if (!server) {\n            throw new Meteor.Error('improper-server-config', 'No properly configured server was available over DICOMWeb or DIMSE.');\n        }\n\n        try {\n            if (server.type === 'dicomWeb') {\n                return OHIF.studies.services.WADO.RetrieveMetadata(server, studyInstanceUid);\n            } else if (server.type === 'dimse') {\n                return OHIF.studies.services.DIMSE.RetrieveMetadata(studyInstanceUid);\n            }\n        } catch (error) {\n            OHIF.log.trace();\n\n            throw error;\n        }\n    }\n});\n","import './getStudyMetadata.js';\nimport './studylistSearch.js';\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\n\nMeteor.methods({\n    /**\n     * Use the specified filter to conduct a search from the DICOM server\n     *\n     * @param filter\n     */\n    StudyListSearch(filter) {\n        // Get the server data. This is user-defined in the config.json files or through servers\n        // configuration modal\n        const server = OHIF.servers.getCurrentServer();\n\n        if (!server) {\n            throw new Meteor.Error('improper-server-config', 'No properly configured server was available over DICOMWeb or DIMSE.');\n        }\n\n        try {\n            if (server.type === 'dicomWeb') {\n                return OHIF.studies.services.QIDO.Studies(server, filter);\n            } else if (server.type === 'dimse') {\n                return OHIF.studies.services.DIMSE.Studies(filter);\n            }\n        } catch (error) {\n            OHIF.log.trace();\n\n            throw error;\n        }\n    }\n});\n","import './namespace.js';\n\n// DIMSE instance, study, and metadata retrieval\nimport './dimse/instances.js';\nimport './dimse/studies.js';\nimport './dimse/retrieveMetadata.js';\nimport './dimse/setup.js';\n","import { OHIF } from 'meteor/ohif:core';\n\nOHIF.studies.services.DIMSE = {};\n","import { OHIF } from 'meteor/ohif:core';\nimport DIMSE from 'dimse';\n\n/**\n * Parses data returned from a study search and transforms it into\n * an array of series that are present in the study\n *\n * @param resultData\n * @param studyInstanceUid\n * @returns {Array} Series List\n */\nfunction resultDataToStudyMetadata(resultData, studyInstanceUid) {\n    const seriesMap = {};\n    const seriesList = [];\n\n    resultData.forEach(function(instanceRaw) {\n        const instance = instanceRaw.toObject();\n        // Use seriesMap to cache series data\n        // If the series instance UID has already been used to\n        // process series data, continue using that series\n        const seriesInstanceUid = instance[0x0020000E];\n        let series = seriesMap[seriesInstanceUid];\n\n        // If no series data exists in the seriesMap cache variable,\n        // process any available series data\n        if (!series) {\n            series = {\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: instance[0x00200011],\n                instances: []\n            };\n\n            // Save this data in the seriesMap cache variable\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        // TODO: Check which peer it should point to\n        const server = OHIF.servers.getCurrentServer().peers[0];\n\n        const serverRoot = server.host + ':' + server.port;\n\n        const sopInstanceUid = instance[0x00080018];\n        const uri = serverRoot + '/studies/' + studyInstanceUid + '/series/' + seriesInstanceUid + '/instances/' + sopInstanceUid + '/frames/1';\n\n        // Add this instance to the current series\n        series.instances.push({\n            sopClassUid: instance[0x00080016],\n            sopInstanceUid,\n            uri,\n            instanceNumber: instance[0x00200013]\n        });\n    });\n    return seriesList;\n}\n\n/**\n * Retrieve a set of instances using a DIMSE call\n * @param studyInstanceUid\n * @returns {{wadoUriRoot: String, studyInstanceUid: String, seriesList: Array}}\n */\nOHIF.studies.services.DIMSE.Instances = function(studyInstanceUid) {\n    //var url = buildUrl(server, studyInstanceUid);\n    const result = DIMSE.retrieveInstances(studyInstanceUid);\n\n    return {\n        studyInstanceUid: studyInstanceUid,\n        seriesList: resultDataToStudyMetadata(result, studyInstanceUid)\n    };\n};\n","import { OHIF } from 'meteor/ohif:core';\nimport { parseFloatArray } from 'meteor/ohif:studies/imports/both/lib/parseFloatArray';\nimport DIMSE from 'dimse';\n\n/**\n * Returns the value of the element (e.g. '00280009')\n *\n * @param element - The group/element of the element (e.g. '00280009')\n * @param defaultValue - The default value to return if the element does not exist\n * @returns {*}\n */\nfunction getValue(element, defaultValue) {\n    if (!element || !element.value) {\n        return defaultValue;\n    }\n\n    return element.value;\n}\n\n/**\n * Parses the SourceImageSequence, if it exists, in order\n * to return a ReferenceSOPInstanceUID. The ReferenceSOPInstanceUID\n * is used to refer to this image in any accompanying DICOM-SR documents.\n *\n * @param instance\n * @returns {String} The ReferenceSOPInstanceUID\n */\nfunction getSourceImageInstanceUid(instance) {\n    // TODO= Parse the whole Source Image Sequence\n    // This is a really poor workaround for now.\n    // Later we should probably parse the whole sequence.\n    const SourceImageSequence = instance[0x00082112];\n    if (SourceImageSequence && SourceImageSequence.length) {\n        return SourceImageSequence[0][0x00081155];\n    }\n}\n\n/**\n * Parses result data from a DIMSE search into Study MetaData\n * Returns an object populated with study metadata, including the\n * series list.\n *\n * @param studyInstanceUid\n * @param resultData\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nfunction resultDataToStudyMetadata(studyInstanceUid, resultData) {\n    OHIF.log.info('resultDataToStudyMetadata');\n    const seriesMap = {};\n    const seriesList = [];\n\n    if (!resultData.length) {\n        return;\n    }\n\n    const anInstance = resultData[0].toObject();\n    if (!anInstance) {\n        return;\n    }\n\n    const studyData = {\n        seriesList: seriesList,\n        patientName: anInstance[0x00100010],\n        patientId: anInstance[0x00100020],\n        patientBirthDate: anInstance[0x00100030],\n        patientSex: anInstance[0x00100040],\n        accessionNumber: anInstance[0x00080050],\n        studyDate: anInstance[0x00080020],\n        modalities: anInstance[0x00080061],\n        studyDescription: anInstance[0x00081030],\n        imageCount: anInstance[0x00201208],\n        studyInstanceUid: anInstance[0x0020000D],\n        institutionName: anInstance[0x00080080]\n    };\n\n    resultData.forEach(function(instanceRaw) {\n        const instance = instanceRaw.toObject();\n        const seriesInstanceUid = instance[0x0020000E];\n        let series = seriesMap[seriesInstanceUid];\n        if (!series) {\n            series = {\n                seriesDescription: instance[0x0008103E],\n                modality: instance[0x00080060],\n                seriesInstanceUid: seriesInstanceUid,\n                seriesNumber: parseFloat(instance[0x00200011]),\n                instances: []\n            };\n            seriesMap[seriesInstanceUid] = series;\n            seriesList.push(series);\n        }\n\n        const sopInstanceUid = instance[0x00080018];\n\n        const instanceSummary = {\n            imageType: instance[0x00080008],\n            sopClassUid: instance[0x00080016],\n            modality: instance[0x00080060],\n            sopInstanceUid: sopInstanceUid,\n            instanceNumber: parseFloat(instance[0x00200013]),\n            imagePositionPatient: instance[0x00200032],\n            imageOrientationPatient: instance[0x00200037],\n            frameOfReferenceUID: instance[0x00200052],\n            sliceThickness: parseFloat(instance[0x00180050]),\n            sliceLocation: parseFloat(instance[0x00201041]),\n            tablePosition: parseFloat(instance[0x00189327]),\n            samplesPerPixel: parseFloat(instance[0x00280002]),\n            photometricInterpretation: instance[0x00280004],\n            planarConfiguration: parseFloat(instance[0x00280006]),\n            rows: parseFloat(instance[0x00280010]),\n            columns: parseFloat(instance[0x00280011]),\n            pixelSpacing: instance[0x00280030],\n            bitsAllocated: parseFloat(instance[0x00280100]),\n            bitsStored: parseFloat(instance[0x00280101]),\n            highBit: parseFloat(instance[0x00280102]),\n            pixelRepresentation: parseFloat(instance[0x00280103]),\n            windowCenter: instance[0x00281050],\n            windowWidth: instance[0x00281051],\n            rescaleIntercept: parseFloat(instance[0x00281052]),\n            rescaleSlope: parseFloat(instance[0x00281053]),\n            sourceImageInstanceUid: getSourceImageInstanceUid(instance),\n            laterality: instance[0x00200062],\n            viewPosition: instance[0x00185101],\n            acquisitionDateTime: instance[0x0008002A],\n            numberOfFrames: parseFloat(instance[0x00280008]),\n            frameIncrementPointer: getValue(instance[0x00280009]),\n            frameTime: parseFloat(instance[0x00181063]),\n            frameTimeVector: parseFloatArray(instance[0x00181065]),\n            lossyImageCompression: instance[0x00282110],\n            derivationDescription: instance[0x00282111],\n            lossyImageCompressionRatio: instance[0x00282112],\n            lossyImageCompressionMethod: instance[0x00282114],\n            spacingBetweenSlices: instance[0x00180088],\n            echoNumber: instance[0x00180086],\n            contrastBolusAgent: instance[0x00180010]\n        };\n\n        // Retrieve the actual data over WADO-URI\n        const server = OHIF.servers.getCurrentServer();\n        const wadouri = `${server.wadoUriRoot}?requestType=WADO&studyUID=${studyInstanceUid}&seriesUID=${seriesInstanceUid}&objectUID=${sopInstanceUid}&contentType=application%2Fdicom`;\n        instanceSummary.wadouri = WADOProxy.convertURL(wadouri, server);\n\n        series.instances.push(instanceSummary);\n    });\n\n    studyData.studyInstanceUid = studyInstanceUid;\n\n    return studyData;\n}\n\n/**\n * Retrieved Study MetaData from a DICOM server using DIMSE\n * @param studyInstanceUid\n * @returns {{seriesList: Array, patientName: *, patientId: *, accessionNumber: *, studyDate: *, modalities: *, studyDescription: *, imageCount: *, studyInstanceUid: *}}\n */\nOHIF.studies.services.DIMSE.RetrieveMetadata = function(studyInstanceUid) {\n    // TODO: Check which peer it should point to\n    const activeServer = OHIF.servers.getCurrentServer().peers[0];\n    const supportsInstanceRetrievalByStudyUid = activeServer.supportsInstanceRetrievalByStudyUid;\n    let results;\n\n    // Check explicitly for a value of false, since this property\n    // may be left undefined in config files\n    if (supportsInstanceRetrievalByStudyUid === false) {\n        results = DIMSE.retrieveInstancesByStudyOnly(studyInstanceUid);\n    } else {\n        results = DIMSE.retrieveInstances(studyInstanceUid);\n    }\n\n    return resultDataToStudyMetadata(studyInstanceUid, results);\n};\n","import { Meteor } from 'meteor/meteor';\nimport { OHIF } from 'meteor/ohif:core';\nimport { CurrentServer } from 'meteor/ohif:servers/both/collections';\nimport DIMSE from 'dimse';\n\nconst setupDIMSE = () => {\n    // Terminate existing DIMSE servers and sockets and clean up the connection object\n    DIMSE.connection.reset();\n\n    // Get the new server configuration\n    const server = OHIF.servers.getCurrentServer();\n\n    // Stop here if the new server is not of DIMSE type\n    if (server.type !== 'dimse') {\n        return;\n    }\n\n    // Check if peers were defined in the server configuration and throw an error if not\n    const peers = server.peers;\n    if (!peers || !peers.length) {\n        OHIF.log.error('dimse-config: ' + 'No DIMSE Peers provided.');\n        throw new Meteor.Error('dimse-config', 'No DIMSE Peers provided.');\n    }\n\n    // Add all the DIMSE peers, establishing the connections\n    OHIF.log.info('Adding DIMSE peers');\n    try {\n        peers.forEach(peer => DIMSE.connection.addPeer(peer));\n    } catch(error) {\n        OHIF.log.error('dimse-addPeers: ' + error);\n        throw new Meteor.Error('dimse-addPeers', error);\n    }\n};\n\n// Setup the DIMSE connections on startup or when the current server is changed\nMeteor.startup(() => {\n    CurrentServer.find().observe({\n        added: setupDIMSE,\n        changed: setupDIMSE\n    });\n});\n","import { moment } from 'meteor/momentjs:moment';\nimport { OHIF } from 'meteor/ohif:core';\nimport DIMSE from 'dimse';\n\n/**\n * Parses resulting data from a QIDO call into a set of Study MetaData\n *\n * @param resultData\n * @returns {Array} An array of Study MetaData objects\n */\nfunction resultDataToStudies(resultData) {\n    const studies = [];\n\n    resultData.forEach(function(studyRaw) {\n        const study = studyRaw.toObject();\n        studies.push({\n            studyInstanceUid: study[0x0020000D],\n            // 00080005 = SpecificCharacterSet\n            studyDate: study[0x00080020],\n            studyTime: study[0x00080030],\n            accessionNumber: study[0x00080050],\n            referringPhysicianName: study[0x00080090],\n            // 00081190 = URL\n            patientName: study[0x00100010],\n            patientId: study[0x00100020],\n            patientBirthdate: study[0x00100030],\n            patientSex: study[0x00100040],\n            imageCount: study[0x00201208],\n            studyId: study[0x00200010],\n            studyDescription: study[0x00081030],\n            modalities: study[0x00080061]\n        });\n    });\n    return studies;\n}\n\nOHIF.studies.services.DIMSE.Studies = function(filter) {\n    OHIF.log.info('Services.DIMSE.Studies');\n\n    let filterStudyDate = '';\n    if (filter.studyDateFrom && filter.studyDateTo) {\n        const convertDate = date => moment(date, 'MM/DD/YYYY').format('YYYYMMDD');\n        const dateFrom = convertDate(filter.studyDateFrom);\n        const dateTo = convertDate(filter.studyDateTo);\n        filterStudyDate = `${dateFrom}-${dateTo}`;\n    }\n\n    // Build the StudyInstanceUID parameter\n    let studyUids = filter.studyInstanceUid || '';\n    if (studyUids) {\n        studyUids = Array.isArray(studyUids) ? studyUids.join() : studyUids;\n        studyUids = studyUids.replace(/[^0-9.]+/g, '\\\\');\n    }\n\n    const parameters = {\n        0x0020000D: studyUids,\n        0x00100010: filter.patientName,\n        0x00100020: filter.patientId,\n        0x00080050: filter.accessionNumber,\n        0x00080020: filterStudyDate,\n        0x00081030: filter.studyDescription,\n        0x00100040: '',\n        0x00201208: '',\n        0x00080061: filter.modalitiesInStudy\n    };\n\n    const results = DIMSE.retrieveStudies(parameters);\n    return resultDataToStudies(results);\n};\n"]}