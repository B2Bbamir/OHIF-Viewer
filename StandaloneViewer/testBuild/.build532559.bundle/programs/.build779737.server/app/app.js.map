{"version":3,"sources":["meteor://ðŸ’»app/server/collections.js","meteor://ðŸ’»app/routes.js"],"names":["Meteor","module","watch","require","v","RequestStudies","Collection","remove","testDataFiles","forEach","file","indexOf","jsonData","Assets","getText","data","JSON","parse","insert","Router","OHIF","icrXnatRoiSession","sessionMap","console","log","isDevelopment","isClient","info","disconnect","url","window","location","href","origin","urlExtention","replace","split","viewerRoot","rootUrl","Session","set","configure","loadingTemplate","onBeforeAction","route","onRun","next","params","subjectId","projectId","experimentId","experimentLabel","parentProjectId","query","error","RoiStateManagement","checkAndSetPermissions","jsonRequestUrl","get","getJson","then","json","warn","jsonString","stringify","RegExp","catch","subjectExperimentListUrl","experimentList","ResultSet","Result","results","i","length","experimentIdI","ID","experimentJSONFetchUrl","Promise","all","jsonFiles","studyList","transactionId","studies","experimentJsonI","studiesI","label","studyDescription","action","render","id","idUrl","oReq","XMLHttpRequest","addEventListener","responseText","parsedJSON","open","setRequestHeader","send","isServer","where","findOne","response","setHeader","write","end","resolve","reject","xhr","onload","status","onerror","responseType"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\n// Create a Collection to store data\nRequestStudies = new Meteor.Collection('requestStudies');\n\n// Remove all previous data\nRequestStudies.remove({});\n\nconst testDataFiles = [\n    'sample.json',\n    'testDICOMs.json',\n    'CRStudy.json',\n    'CTStudy.json',\n    'DXStudy.json',\n    'MGStudy.json',\n    'MRStudy.json',\n    'PTCTStudy.json',\n    'RFStudy.json'\n];\n\ntestDataFiles.forEach(file => {\n    if (file.indexOf('.json') === -1) {\n        return;\n    }\n\n    // Read JSON files and save the content in the database\n    const jsonData = Assets.getText(`testData/${file}`);\n    const data = JSON.parse(jsonData);\n\n    RequestStudies.insert(data);\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Router } from 'meteor/clinical:router';\nimport { OHIF } from 'meteor/ohif:core';\nimport { icrXnatRoiSession } from 'meteor/icr:xnat-roi-namespace';\nimport { sessionMap } from 'meteor/icr:series-info-provider';\n\nconsole.log(Meteor.isDevelopment);\n\nif (Meteor.isClient && !Meteor.isDevelopment) {\n  // XNAT deployment mode.\n  // Disconnect from the Meteor Server since we don't need it\n  OHIF.log.info('Disconnecting from the Meteor server');\n  Meteor.disconnect();\n\n  const url = window.location.href;\n\n  const origin = window.location.origin;\n  const urlExtention = url.replace(origin, '').split('VIEWER')[0].replace(/\\//g, '');\n\n  console.log(urlExtention);\n\n  let viewerRoot;\n  let rootUrl;\n\n  if (urlExtention) {\n    viewerRoot = `/${urlExtention}/VIEWER`;\n    rootUrl = `${origin}/${urlExtention}`;\n  } else {\n    viewerRoot = `/VIEWER`;\n    rootUrl = origin;\n  }\n\n  Session.set('rootUrl', rootUrl);\n  Session.set('viewerRoot', viewerRoot);\n\n  console.log(`origin: ${origin}`);\n  console.log(`urlExtention ${urlExtention}`);\n  console.log(`rootUrl: ${rootUrl}`);\n  console.log(`viewerRoot\" ${viewerRoot}`);\n\n  Router.configure({\n      loadingTemplate: 'loading'\n  });\n\n  Router.onBeforeAction('loading');\n\n  // JPETTS -- route based on XNAT root\n  Router.route(`${viewerRoot}`, {\n      onRun: function() {\n          console.log('onRun');\n\n          const next = this.next;\n\n          console.log(this.params);\n\n          // Query params:\n          //\n          // Single Session:\n          //   projectId, subjectId, experimentId, experimentLabel\n          //\n          // Single Session in shared project:\n          //   projectId, subjectId, experimentId, experimentLabel, parentProjectId\n          //\n          // Subject:\n          //   projectId, subjectId\n          //\n          // Subject in shared project (WIP):\n          //  projectId, subjectId, parentProjectId\n\n          let subjectId;\n          let projectId;\n          let experimentId;\n          let experimentLabel;\n          let parentProjectId;\n\n          if (this.params.query) {\n            const query = this.params.query;\n\n            experimentLabel = query.experimentLabel;\n            parentProjectId = query.parentProjectId;\n            subjectId = query.subjectId;\n            projectId = query.projectId;\n            experimentId = query.experimentId;\n          } else {\n            console.error('insufficient query parameters.');\n          }\n\n          if (parentProjectId) {\n            console.log(`This experiment is shared view of ${experimentId} from ${parentProjectId}`);\n          }\n\n          if (experimentId) {\n            // Single Session\n            //\n            icrXnatRoiSession.set('sourceProjectId', parentProjectId ? parentProjectId : projectId);\n            icrXnatRoiSession.set('experimentId', experimentId);\n            icrXnatRoiSession.set('subjectId', subjectId);\n            icrXnatRoiSession.set('projectId', projectId);\n            icrXnatRoiSession.set('parentProjectId', parentProjectId);\n\n            OHIF.RoiStateManagement.checkAndSetPermissions();\n\n            // Build JSON GET url.\n            const jsonRequestUrl = `${Session.get('rootUrl')}/xapi/viewer/projects/${projectId}/experiments/${experimentId}`;\n\n            getJson(jsonRequestUrl).then(json => {\n              // Parse the response content\n              // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n              if (!json) {\n                  OHIF.log.warn('Response was undefined');\n                  return;\n              }\n\n              sessionMap.set(json, experimentId, experimentLabel);\n\n              let jsonString = JSON.stringify(json);\n\n              if (parentProjectId) {\n                console.log(`replacing ${parentProjectId} with ${projectId}`);\n                jsonString = jsonString.replace( new RegExp( parentProjectId, 'g' ), projectId );\n              }\n\n              this.data = JSON.parse(jsonString);\n\n              next();\n            }).catch(error => {\n              console.log(error);\n              OHIF.log.warn('An error occurred while retrieving the JSON data');\n              next();\n            });\n          } else {\n            // Whole Subject.\n            //\n\n            icrXnatRoiSession.set('sourceProjectId', parentProjectId ? parentProjectId : projectId);\n            icrXnatRoiSession.set('projectId', projectId);\n            icrXnatRoiSession.set('subjectId', subjectId);\n\n\n            const subjectExperimentListUrl = `${Session.get('rootUrl')}/data/archive/projects/${projectId}/subjects/${subjectId}/experiments?format=json`;\n\n            OHIF.RoiStateManagement.checkAndSetPermissions();\n\n            getJson(subjectExperimentListUrl).then(json => {\n              // TODO -> Fetch each json.\n              // Promise.all and combine JSON.\n              // Load up viewer.\n              console.log(json);\n\n              const experimentList = json.ResultSet.Result;\n              const results = [];\n\n              for (let i = 0; i < experimentList.length; i++) {\n                const experimentIdI = experimentList[i].ID;\n\n                const experimentJSONFetchUrl = `${Session.get('rootUrl')}/xapi/viewer/projects/${projectId}/experiments/${experimentIdI}`;\n\n                results[i] = getJson(experimentJSONFetchUrl);\n              }\n\n              Promise.all(results).then((jsonFiles) => {\n                console.log(jsonFiles);\n\n                let studyList = {\n                  transactionId: subjectId,\n                  studies: []\n                };\n\n                for (let i = 0; i < jsonFiles.length; i++) {\n                  const experimentJsonI = jsonFiles[i];\n                  const studiesI = experimentJsonI.studies;\n\n                  sessionMap.set(experimentJsonI, experimentList[i].ID, experimentList[i].label);\n\n                  console.log('Session Map:')\n                  console.log(sessionMap);\n\n                  // TODO -> clean this\n                  studiesI[0].studyDescription = experimentList[i].label || experimentList[i].ID;\n\n                  console.log(`Studies[${i}]`);\n\n                  console.log(studiesI);\n\n                  studyList.studies = [...studyList.studies, ...studiesI];\n                }\n\n                console.log(studyList);\n\n\n                if (parentProjectId) {\n                  console.log(`replacing ${parentProjectId} with ${projectId}`);\n\n                  let jsonString = JSON.stringify(studyList);\n\n                  jsonString = jsonString.replace( new RegExp( parentProjectId, 'g' ), projectId );\n\n                  studyList = JSON.parse(jsonString);\n                }\n\n                console.log(studyList);\n\n                this.data = studyList;\n\n                console.log(this);\n                console.log(this.data);\n\n                next();\n              });\n\n            });\n\n          }\n      },\n      action() {\n        console.log('Loading up viewer with json!');\n          // Render the Viewer with this data\n          this.render('standaloneViewer', {\n              data: () => this.data\n          });\n      }\n  });\n} else {\n    // Local dev mode.\n    if (Meteor.isClient) {\n      // Disconnect from the Meteor Server since we don't need it\n      OHIF.log.info('Disconnecting from the Meteor server');\n      Meteor.disconnect();\n\n      Router.configure({\n          loadingTemplate: 'loading'\n      });\n\n      Router.onBeforeAction('loading');\n\n      Router.route('/:id?', {\n          onRun: function() {\n              console.warn('onRun');\n              // Retrieve the query from the URL the user has entered\n              const query = this.params.query;\n              const id = this.params.id;\n\n              if (!id && !query.url) {\n                  console.log('No URL was specified. Use ?url=${yourURL}');\n                  return;\n              }\n\n              const next = this.next;\n              const idUrl = `/api/${id}`;\n              const url = query.url || idUrl;\n\n              // Define a request to the server to retrieve the study data\n              // as JSON, given a URL that was in the Route\n              const oReq = new XMLHttpRequest();\n\n              // Add event listeners for request failure\n              oReq.addEventListener('error', () => {\n                  OHIF.log.warn('An error occurred while retrieving the JSON data');\n                  next();\n              });\n\n              // When the JSON has been returned, parse it into a JavaScript Object\n              // and render the OHIF Viewer with this data\n              oReq.addEventListener('load', () => {\n                  // Parse the response content\n                  // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n                  if (!oReq.responseText) {\n                      OHIF.log.warn('Response was undefined');\n                      return;\n                  }\n\n                  OHIF.log.info(JSON.stringify(oReq.responseText, null, 2));\n\n                  const parsedJSON = JSON.parse(oReq.responseText);\n\n                  sessionMap.set(parsedJSON, 'TEST_EXPERIMENT_ID', 'TEST_EXPERIMENT_LABEL');\n\n                  this.data = parsedJSON\n\n                  next();\n              });\n\n              // Open the Request to the server for the JSON data\n              // In this case we have a server-side route called /api/\n              // which responds to GET requests with the study data\n              OHIF.log.info(`Sending Request to: ${url}`);\n              oReq.open('GET', url);\n              oReq.setRequestHeader('Accept', 'application/json')\n\n              // Fire the request to the server\n              oReq.send();\n          },\n          action() {\n              // Render the Viewer with this data\n              this.render('standaloneViewer', {\n                  data: () => this.data\n              });\n          }\n      });\n    }\n\n    // This is ONLY for demo purposes.\n    if (Meteor.isServer) {\n      // You can test this with:\n      // curl -v -H \"Content-Type: application/json\" -X GET 'http://localhost:3000/getData/testId'\n      //\n      // Or by going to:\n      // http://localhost:3000/api/testId\n\n      Router.route('/api/:id', { where: 'server' }).get(function() {\n        // \"this\" is the RouteController instance.\n        // \"this.response\" is the Connect response object\n        // \"this.request\" is the Connect request object\n        const id = this.params.id;\n\n        // Find the relevant study data from the Collection given the ID\n        const data = RequestStudies.findOne({ transactionId: id });\n\n        // Set the response headers to return JSON to any server\n        this.response.setHeader('Content-Type', 'application/json');\n        this.response.setHeader('Access-Control-Allow-Origin', '*');\n        this.response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n\n        // Change the response text depending on the available study data\n        if (!data) {\n          this.response.write('No Data Found');\n        } else {\n          // Stringify the JavaScript object to JSON for the response\n          this.response.write(JSON.stringify(data));\n        }\n\n        // Finalize the response\n        this.response.end();\n      });\n    }\n}\n\n\nfunction getJson(url) {\n  return new Promise((resolve, reject) => {\n    // Define a request to the server to retrieve the session data as JSON.\n    const xhr = new XMLHttpRequest();\n\n    xhr.onload = () => {\n      console.log(`GET ${url}... ${xhr.status}`);\n\n      resolve(xhr.response);\n    };\n\n    xhr.onerror = () => {\n      reject(xhr.responseText);\n    };\n\n    xhr.open(\"GET\", url);\n    xhr.responseType = \"json\";\n    xhr.send();\n  });\n}\n"]}